//和lowest common subsequence很像
//都是可以缩减空间复杂度的dp，用k
class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix.length == 0) return 0;
        int k = 1, m = matrix.length, n = matrix[0].length, max = 0; 
        int[][] dp = new int[2][n + 1];
        for(int i = 0; i < m; i++, k ^= 1) {
            for(int j = 0; j < n; j++) {
                if(matrix[i][j] ==  '1'){
                    dp[k][j + 1] = Math.min(dp[k][j], Math.min(dp[k ^ 1][j + 1], dp[k ^ 1][j])) + 1;
                } else dp[k][j + 1] = 0;
                max = Math.max(dp[k][j + 1], max);
            }
        }
        return max * max;
    }
}
