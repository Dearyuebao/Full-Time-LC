class Solution {
    public boolean stoneGame(int[] piles) {
        int n = piles.length;
        int[][] dp = new int[n][n];
        for(int i = 0; i < n; i++) {
            dp[i][i] = piles[i];
        }
        for(int i = 1; i < n; i++) {
            for(int j = 0; j < n - i; j++) {
                dp[j][j + i] = Math.max(piles[j] - dp[j + 1][j + i], piles[j + i] - dp[j][j + i - 1]);
            }
        }
        return dp[0][n - 1] > 0;
    }
}

//dp[i][j] = Math.max(piles[i] - dp[i + 1][j], piles[j] - dp[i][j - 1])
//which represents the number of stones picked from i and j over its next person
//alex will pick from dp[0][piles.length - 1], we only have to check whether this > 0


//0,1 1,2 ... n - 2,n - 1
//0,2 1,3 ... n - 3,n - 2
//0,3 1,4 ... n - 4,n - 3
//
//0,n - 1
//for(int i = 1; i < n; i++) {
//  for(int j = 0; j < n - i; j++) {}
//}
