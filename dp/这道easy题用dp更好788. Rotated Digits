//感觉很无聊。。。但我写的不好
class Solution {
    Map<Integer, Character> map = new HashMap<>();
    public int rotatedDigits(int N) {
        map.put(0, '0');
        map.put(1, '1');
        map.put(2, '5');
        map.put(5, '2');
        map.put(6, '9');
        map.put(8, '8');
        map.put(9, '6');
        int count = 0;
        for(int i = 1; i <= N; i++) {
            if(valid(i)) {
                count++;
            }
        }
        return count;
    }
    
    public boolean valid(int n) {
        int tmp = n;
        StringBuilder sb = new StringBuilder();
        while(tmp > 0) {
            int curr = tmp % 10;
            if(!map.containsKey(curr)) return false;
            sb.insert(0, map.get(curr));
            tmp /= 10;
        }
        int m = Integer.valueOf(sb.toString());
        if(m != n) return true;
        return false;
    }
}

//大佬的dp写法 厉害了
 public int rotatedDigits(int N) {
        int[] dp = new int[N + 1];
        int count = 0;
        for(int i = 0; i <= N; i++){//注意！！！不要从1开始 这样dp[0]会没有值
            if(i < 10){
                if(i == 0 || i == 1 || i == 8) dp[i] = 1;
                else if(i == 2 || i == 5 || i == 6 || i == 9){
                    dp[i] = 2;
                    count++;
                }
            } else {
                int a = dp[i / 10], b = dp[i % 10];
                if(a == 1 && b == 1) dp[i] = 1;
                else if(a >= 1 && b >= 1){
                    dp[i] = 2;
                    count++;
                }
            }
        }
        return count;
    }
