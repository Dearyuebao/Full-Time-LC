class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length;
        int l = (m + n + 1) / 2;
        int r = (m + n + 2) / 2;
        return (findK(nums1, 0, nums2, 0, l) + findK(nums1, 0, nums2, 0, r)) / 2;
    }
    
    public double findK(int[] nums1, int startA, int[] nums2, int startB, int k) {
        if(startA >= nums1.length) return nums2[startB + k - 1];
        if(startB >= nums2.length) return nums1[startA + k - 1];
        if(k == 1) return Math.min(nums1[startA], nums2[startB]);
        
        int midA = Integer.MAX_VALUE, midB = Integer.MAX_VALUE;
        if(startA + k / 2 - 1 < nums1.length) midA = nums1[startA + k / 2 - 1];
        if(startB + k / 2 - 1 < nums2.length) midB = nums2[startB + k / 2 - 1];
        if(midA > midB) {
            return findK(nums1, startA, nums2, startB + k / 2, k - k / 2);
        } else {
            return findK(nums1, startA + k / 2, nums2, startB, k - k / 2);
        }
    }
}
