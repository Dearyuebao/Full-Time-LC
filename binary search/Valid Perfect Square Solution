Given a positive integer num, write a function which returns True if num is a perfect square else False.
//就是二分法 当right = mid - 1, left = mid + 1这种 就用left <= right做循环条件
//mid定义为long类型 因为一个比int num小的数的平方很有可能会超出int的范围
//但是当下面再改left right的时候 要right = (int)mid - 1强制转换
class Solution {
    public boolean isPerfectSquare(int num) {
        int low = 1, high = num;
        while (low <= high) {
            // long mid = (low + high) >>> 1;
            long mid = low + (high - low) / 2;
            long multi = mid * mid;
            if (multi == num) {
                return true;
            } else if (multi < num) {
                low = (int)mid + 1;
            } else {
                high = (int)mid - 1;
            }
        }
        return false;
    }
}

//当知道了平方数具有这样的特征：square = 1 + 3 + 5 + 7 + ... odd number
public boolean isPerfectSquare(int num) {
      int sequence = 1;
      while(num > 0) {
          num -= sequence;
          sequence += 2;
      }
      return num == 0;
  }
