class Solution {
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        //union find
        Map<String, String> owner = new HashMap<>();
        Map<String, String> parent = new HashMap<>();
        Map<String, TreeSet<String>> union = new HashMap<>();
        for(List<String> account:accounts) {
            for(int i = 1; i < account.size(); i++) {
                owner.put(account.get(i), account.get(0));
                parent.put(account.get(i), account.get(i));
            }
        }
        for(List<String> account:accounts) {
            String p = find(account.get(1), parent);
            for(int i = 2; i < account.size(); i++) {
                parent.put(find(account.get(i), parent), p);
            }
        }
        for(List<String> account:accounts) {
            String p = find(account.get(1), parent);
            if(!union.containsKey(p)) union.put(p, new TreeSet<>());
            for(int i = 1; i < account.size(); i++) {
                union.get(p).add(account.get(i));
            }
        }
        List<List<String>> res = new ArrayList<>();
        for(String each:union.keySet()) {
            String name = owner.get(each);
            List<String> emails = new ArrayList<>(union.get(each));
            emails.add(0, name);
            res.add(emails);
        }
        return res;
    }
    public String find(String root, Map<String, String> parent) {
        while(root != parent.get(root)) {
            parent.put(root, parent.get(parent.get(root)));//compression
            root = parent.get(root);
        }
        return root;
    }
}
