//The idea is simple. To represent a list of islands, we use trees. i.e., a list of roots. 
//This helps us find the identifier of an island faster. If roots[c] = p means the parent of node c is p, 
//we can climb up the parent chain to find out the identifier of an island, i.e.
//To transform the two dimension problem into the classic UF, perform a linear mapping index = n * x + y;

//UNION operation is only changing the root parent so the running time is O(1).

//FIND operation is proportional to the depth of the tree. If N is the number of points added, 
//the average running time is O(logN), and a sequence of 4N operations take O(NlogN). 
//If there is no balancing, the worse case could be O(N^2).
class Solution {
    public List<Integer> numIslands2(int m, int n, int[][] positions) {
        List<Integer> res = new ArrayList<>();
        int[] root = new int[m * n];
        Arrays.fill(root, -1);
        int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int count = 0;
        for(int[] position:positions) {
            int x = position[0], y = position[1];
            int index = n * x + y;
            
            if (root[index] != -1) {
                res.add(count);
                continue;
            }
            root[index] = index;
            count++;
            for(int[] dir:dirs) {
                int newX = x + dir[0];
                int newY = y + dir[1];
                int nb = newX * n + newY;
                if(newX < 0 || newX >= m || newY < 0 || newY >= n || root[nb] == -1) continue;
                
                int rootNb = findRoot(root, nb);
                if(index != rootNb) {
                    root[index] = rootNb;
                    index = rootNb;
                    count--;
                }
            }
            res.add(count);
        }
        return res;
    }
    
    public int findRoot(int[] root, int id) {
        while(id != root[id]) {
            //root[id] = root[root[id]];
            id = root[id];
        }
        return id;
    }
}
