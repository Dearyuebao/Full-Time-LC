//keep一个list里面都是unique number,并需要保持他们的顺序
//想到了lru cache那道题
//我的做法如下
//没有找到这道题的discussion

class FirstUnique {
    
    class DLinkedNode {
        int key;
        int val;
        DLinkedNode pre;
        DLinkedNode post;
    }
    
    DLinkedNode head = new DLinkedNode();
    DLinkedNode tail = new DLinkedNode();
    Map<Integer, DLinkedNode> map = new HashMap<>();
    
    public FirstUnique(int[] nums) {
        this.head.pre = null;
        this.head.post = tail;
        this.tail.pre = head;
        this.tail.post = null;
        for(int each: nums) {
            if(map.containsKey(each)) {
                if(map.get(each).val == 1) removeNode(each);
                map.get(each).val += 1;
            }
            else {
                addNode(each);
            }
        }
        
    }
    
    public void removeNode(int each) {
        DLinkedNode node = map.get(each);
        DLinkedNode prenode = node.pre;
        DLinkedNode postnode = node.post;
        prenode.post = postnode;
        postnode.pre = prenode;
    }
    
    public void addNode(int each) {
        DLinkedNode node = new DLinkedNode();
        node.key = each;
        node.val = 1;
        DLinkedNode prenode = this.tail.pre;
        prenode.post = node;
        node.pre = prenode;
        node.post = tail;
        tail.pre = node;
        map.put(each, node);
    }
    
    public int showFirstUnique() {
        if(head.post == tail) return -1;
        return this.head.post.key;
    }
    
    public void add(int value) {
        if(map.containsKey(value)) {
            if(map.get(value).val == 1) removeNode(value);
            map.get(value).val += 1;
        }
        else {
            addNode(value);
        }
    }
}

/**
 * Your FirstUnique object will be instantiated and called as such:
 * FirstUnique obj = new FirstUnique(nums);
 * int param_1 = obj.showFirstUnique();
 * obj.add(value);
 */
 
 //用linkedhashset可以大大缩减代码长度
 //linkedhashset是有序的hashset 继承了hashset的很多功能
 //比如remove和add都不需要自己写了
 class FirstUnique {
    Set<Integer> more = new HashSet<>();
    LinkedHashSet<Integer> queue = new LinkedHashSet<>();
    public FirstUnique(int[] nums) {
        for(int each: nums) add(each);
    }
    
    public int showFirstUnique() {
        if(queue.size() == 0) return -1;
        return queue.iterator().next();
    }
    
    public void add(int value) {
        if(more.contains(value)) return;
        if(queue.contains(value)) {
            queue.remove(value);
            more.add(value);
        } else {
            queue.add(value);
        }
    }
}
