//dfs retrun void: 这种写法不能加memo 容易tle
//dfs return something 这种写法可以加memo优化
就是up-bottom 而dp是bottom-up
dp怎么写这道题 我不会 是个三维dp 
dfs也是参考了其他人的写法 dfs的入口参数就是dp的每个index

class Solution {
    Long[][][] memo;
    int[] houses;
    int[][] cost;
    int m, n;
    public int minCost(int[] houses, int[][] cost, int m, int n, int target) {
        memo = new Long[m + 1][n + 1][target + 1];
        this.houses = houses;
        this.cost = cost;
        this.m = m; this.n = n;
        int res = (int)(dfs(0, 0, target));
        return res == Integer.MAX_VALUE? -1 : res;
    }
    
    public long dfs(int curIndex, int preColor, int target) {
        if(target < 0) return Integer.MAX_VALUE;
        if(curIndex == m && target == 0) return 0;
        if(curIndex == m) return Integer.MAX_VALUE;
        if(memo[curIndex][preColor][target] != null) return memo[curIndex][preColor][target];
        long minCost = Integer.MAX_VALUE;
        if(houses[curIndex] == 0) {
            for(int i = 1; i <= n; i++) {
                if(i == preColor) {
                    minCost = Math.min(minCost, cost[curIndex][i - 1] + dfs(curIndex + 1, i, target));
                } else {
                    minCost = Math.min(minCost, cost[curIndex][i - 1] + dfs(curIndex + 1, i, target - 1));
                }
            }
        } else {
            if(preColor == houses[curIndex]) {
                minCost = Math.min(minCost, dfs(curIndex + 1, houses[curIndex], target));
            } else {
                minCost = Math.min(minCost, dfs(curIndex + 1, houses[curIndex], target - 1));
            }
        }
        memo[curIndex][preColor][target] = minCost;
        return minCost;
    }
    
}
