class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        int n = nums.length, sum = 0;
        for(int i = 0; i < n; i++) sum += nums[i];
        if(sum % k != 0) return false;
        int eachSum = sum / k;
        return dfs(nums, new int[nums.length], k, 0, 0, eachSum);
    }
    public boolean dfs(int[] nums, int[] visited, int k, int start, int currSum, int target) {
        if(k == 1) return true;
        if(currSum > target) return false;
        if(currSum == target) return dfs(nums, visited, k - 1, 0, 0, target);
        for(int i = start; i < nums.length; i++) {
            if(visited[i] == 0) {
                visited[i] = 1;
                if(dfs(nums, visited, k, i + 1, currSum + nums[i], target)) return true;
                visited[i] = 0;
            }
        }
        return false;
    }
    
}

