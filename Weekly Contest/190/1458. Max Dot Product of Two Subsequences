//动态规划 二维dp
//自己没有想到 看到hint是longest common subsequence， 才想到用二维dp
//但是想到二维dp 之后马上就做出来了
//当这种可能的组合情况有很多的时候 又是要取最大值 就要考虑用dp了！！！
class Solution {
    public int maxDotProduct(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length;
        int[][] matrix = new int[m][n];
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                matrix[i][j] = nums1[i] * nums2[j];
            }
        }
        int[][] dp = new int[m][n];
        dp[0][0] = matrix[0][0];
        for(int i = 1; i < m; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], matrix[i][0]);
        }
        for(int i = 1; i < n; i++) {
            dp[0][i] = Math.max(dp[0][i - 1], matrix[0][i]);
        }
        
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                dp[i][j] = Math.max(dp[i - 1][j], Math.max(dp[i][j - 1], Math.max(dp[i - 1][j - 1], 0) + matrix[i][j]));
                //！！！Math.max(dp[i - 1][j - 1], 0)可以不屈不挠左上的 直接从当前的开始 就是0 因为左上的有可能为负
            }
        }
        return dp[m - 1][n - 1];
    }
}
