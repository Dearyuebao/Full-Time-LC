//20分钟做完
//先找到所有的路径 通过count判断每条路径是否是palindrome
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int pseudoPalindromicPaths (TreeNode root) {
        if(root == null) return 0;
        List<List<Integer>> paths = new ArrayList<>();
        List<Integer> curr = new ArrayList<>();
        curr.add(root.val);
        findPaths(root, paths, curr);
        int count = 0;
        for(List<Integer> each: paths) {
            if(isPalindrome(each)) count++;
        }
        return count;
    }
    
    public boolean isPalindrome(List<Integer> list) {
        int[] count = new int[10];
        for(int each:list) {
            count[each]++;
        }
        boolean flag = true;
        for(int i = 0; i < 10; i++) {
            if(count[i] % 2 != 0 && flag == false) return false;
            else if(count[i] % 2 != 0 && flag == true) flag = false;
        }
        return true;
        
    }
    
    public void findPaths(TreeNode root, List<List<Integer>> paths, List<Integer> curr) {
        if(root.left == null && root.right == null) {
            paths.add(new ArrayList<>(curr));
            return;
        }
        if(root.left != null) 
        {
            curr.add(root.left.val);
            findPaths(root.left, paths, curr);
            curr.remove(curr.size() - 1);
        }
        if(root.right != null) {
            curr.add(root.right.val);
            findPaths(root.right,paths, curr);
            curr.remove(curr.size() - 1);
        }
    }
}
