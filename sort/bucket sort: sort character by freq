//我先统计一遍频率 pq做的 复杂度高
class Solution {
    public String frequencySort(String s) {
        Map<Character, Integer> map = new HashMap<>();
        PriorityQueue<Character> pq = new PriorityQueue<>((a, b)->(map.get(b) - map.get(a)));
        
        for(int i = 0; i < s.length(); i++) {
            map.putIfAbsent(s.charAt(i), 0);
            map.put(s.charAt(i), map.get(s.charAt(i)) + 1);
        }
        for(char each: map.keySet()) {
            
                pq.add(each);
            
        }
        StringBuilder sb = new StringBuilder();
        while(!pq.isEmpty()) {
            char curr = pq.poll();
            for(int i = 0; i < map.get(curr); i++) {
                sb.append(curr);
            }
        }
        return sb.toString();
    }
}

//bucket sort 先统计频率 再用一个bucket来存储每个频率的字符 list<char>[] 从频率高的开始数起
class Solution {
    public String frequencySort(String s) {
        Map<Character, Integer> map = new HashMap<>();
        for(int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        List<Character>[] bucket = new List[s.length() + 1];
        for(char each:map.keySet()) {
            int freq = map.get(each);
            if(bucket[freq] == null) bucket[freq] = new ArrayList<>();
            bucket[freq].add(each);
        }
        StringBuilder sb = new StringBuilder();
        for(int i = s.length(); i >= 1; i--) {
            if(bucket[i] != null) {
                for(char c:bucket[i]) {
                    for(int j = i; j > 0; j--) {
                        sb.append(c);
                    }
                }
            }
        }
        return sb.toString();
    }
}
