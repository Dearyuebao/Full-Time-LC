//我写的很冗余的代码 可以精简
class Solution {
    public int minJumps(int[] arr) {
        if(arr.length <= 1) return 0;
        Queue<Integer> q = new LinkedList<>();
        Set<Integer> set = new HashSet<>();
        q.add(0);
        set.add(0);
        int count = 0;
        Map<Integer, List<Integer>> map = new HashMap<>();
        for(int i = 0; i < arr.length; i++) {
            if(map.containsKey(arr[i])) {
                map.get(arr[i]).add(i);
            } else {
                map.put(arr[i], new ArrayList<Integer>());
                map.get(arr[i]).add(i);
            }
        }
        
        while(!q.isEmpty()) {
            int size = q.size();
        
            for(int i = 0; i < size; i++) {
                int curr = q.poll();
                if(curr == arr.length - 1) return count;
                int right = curr + 1;
                int left = curr - 1;
                List<Integer> equal = map.get(arr[curr]);
                if(right < arr.length && !set.contains(right)) {
                    q.add(right);set.add(right);
                }
                if(left >= 0 && !set.contains(left)) {
                    q.add(left); set.add(left);
                }
                for(int each:equal) {
                    if(!set.contains(each)) {
                        q.add(each);
                    }
                }
                equal.clear();
            }
            count++;
        }
        return count;
    }
}

//参考精简版 尤其是map那里 这种做法很大滴提升了速度
class Solution {
    public int minJumps(int[] arr) {
        int n = arr.length;
        boolean[] visited = new boolean[n];
        Map<Integer, List<Integer>> map = new HashMap<>();
        Queue<Integer> q = new LinkedList<>();
        q.add(0);
        visited[0] = true;
        int count= 0;
        for(int i = 0; i < n; i++) map.computeIfAbsent(arr[i], x->new ArrayList<>()).add(i);
        while(!q.isEmpty()) {
            for(int i = q.size(); i > 0; i--) {
                int curr = q.poll();
                if(curr == n - 1) return count;
                List<Integer> equal = map.get(arr[curr]);
                equal.add(curr - 1);
                equal.add(curr + 1);
                for(int each: equal) {
                    if(each >= 0 && each < n && !visited[each]) {
                        q.add(each);
                        visited[each] = true;
                    }
                }
                equal.clear();
            }
            count++;
        }
        return 0;
    }
}
