//stack可以存储null 
//iterative
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null) return true;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root.left);
        stack.push(root.right);
        while(!stack.isEmpty()) {
            if(stack.size() % 2 != 0) return false;
            TreeNode a = stack.pop();
            TreeNode b = stack.pop();
            if(a == null && b == null) continue;
            if(a == null || b == null || a.val != b.val) return false;
            stack.push(a.left);
            stack.push(b.right);
            stack.push(a.right);
            stack.push(b.left);
        }
        return true;
    }  
}

//recursive
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null) return true;
        return isSubSymmetric(root.left, root.right);
    }
    
    public boolean isSubSymmetric(TreeNode left, TreeNode right) {
        if(left == null || right == null) return left == right;
        if(left.val != right.val) return false;
        return isSubSymmetric(left.left, right.right) && isSubSymmetric(left.right, right.left);
    }
}
