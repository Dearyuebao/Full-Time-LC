//recursive只需要考虑当前点 和子节点的关系 以及叶子节点的退出条件

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int max = 0;
    public int longestConsecutive(TreeNode root) {
        recursive(root);
        return max;
    }
    public int[] recursive(TreeNode root) {
        if(root == null) return new int[]{0, 0};
        int inc = 1, dec = 1;
        if(root.left != null) {
            int[] l = recursive(root.left);
            if(root.val == (root.left.val + 1)) dec = Math.max(dec, l[1] + 1);
            if(root.val == (root.left.val - 1)) inc = Math.max(inc, l[0] + 1);
        }
        if(root.right != null) {
            int[] r = recursive(root.right);
            if(root.val == (root.right.val + 1)) dec = Math.max(dec, r[1] + 1);
            if(root.val == (root.right.val - 1)) inc = Math.max(inc, r[0] + 1);
        }
        max = Math.max(max, inc + dec - 1);
        return new int[]{inc, dec};
    }
}
