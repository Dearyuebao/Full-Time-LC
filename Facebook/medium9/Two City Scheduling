Input: [[10,20],[30,200],[400,50],[30,20]]
Output: 110
Explanation: 
The first person goes to city A for a cost of 10.
The second person goes to city A for a cost of 30.
The third person goes to city B for a cost of 50.
The fourth person goes to city B for a cost of 20.

//解法很tricky
The idea is to send each person to city A.
costs = [[10,20],[30,200],[400,50],[30,20]]

So, totalCost = 10 + 30 + 400 + 30 = 470

Now, we need to send n persons to city B.
Which persons do we need to send city B?

Here, we need to minimize the cost.
We have already paid money to go to city A.
So, Send the persons to city B who get more refund
so that our cost will be minimized.

So, maintain refunds of each person
refund[i] = cost[i][1] - cost[i][0]

So, refunds of each person
    refund = [10, 170, -350, -10]

Here, refund +ve means we need to pay
             -ve means we will get refund.

So, sort the refund array.

refund = [-350, -10, 10, 170]

Now, get refund for N persons,
totalCost += 470 + -350 + -10 = 110

So, minimum cost is 110


class Solution {
    public int twoCitySchedCost(int[][] costs) {
        int sumA = 0;
        int[] payB = new int[costs.length];
        for(int i = 0; i < costs.length; i++) {
            sumA += costs[i][0];
            payB[i] = costs[i][1] - costs[i][0];
        }
        Arrays.sort(payB);
        int sumB = 0;
        for(int i = 0; i < costs.length / 2; i++) {
            sumB += payB[i];
        }
        return sumA + sumB;
    }
}


//dp
class Solution {
    public int twoCitySchedCost(int[][] costs) {
        int N = costs.length / 2;
        int[][] dp = new int[N + 1][N + 1];
        for (int i = 1; i <= N; i++) {
            dp[i][0] = dp[i - 1][0] + costs[i - 1][0];
        }
        for (int j = 1; j <= N; j++) {
            dp[0][j] = dp[0][j - 1] + costs[j - 1][1];
        }
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= N; j++) {
                dp[i][j] = Math.min(dp[i - 1][j] + costs[i + j - 1][0], dp[i][j - 1] + costs[i + j - 1][1]);
            }
        }
        return dp[N][N];
    }
}

//张自然的做法
class Solution {
    public int twoCitySchedCost(int[][] costs) {
        PriorityQueue<int[]> queue = 
            new PriorityQueue<>((a,b) -> (Math.abs(b[0] - b[1])) - Math.abs(a[0] - a[1]));
        for(int[] cost:costs) queue.offer(cost);
        int res = 0, half = costs.length / 2, left = 0, right = 0;
        while(!queue.isEmpty() && left < half && right < half){
            int[] cur = queue.poll();
            if(cur[0] < cur[1]){
                res += cur[0];left++;
            }else{
                res += cur[1];right++;
            }   
        }
        while(!queue.isEmpty() && left < half) res += queue.poll()[0];
        while(!queue.isEmpty() && right < half) res += queue.poll()[1];
        return res;
    }
}
