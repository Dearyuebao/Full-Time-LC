class Solution {
    public boolean splitArray(int[] nums) {
        if(nums.length < 7) return false;
        int[] sum = new int[nums.length];
        sum[0] = nums[0];
        for(int i = 1; i < nums.length; i++) {
            sum[i] = sum[i - 1] + nums[i];
        }
        for(int mid = 3; mid < nums.length - 3; mid++) {
            Set<Integer> set = new HashSet<>();
            for(int left = 1; left < mid - 1; left++) {
                if(sum[left - 1] == (sum[mid - 1] - sum[left])) {
                    set.add(sum[left - 1]);
                }
            }
            for(int right = mid + 2; right < nums.length - 1; right++) {
                if((sum[right - 1] - sum[mid]) ==(sum[nums.length - 1] - sum[right]) && set.contains(sum[nums.length - 1] - sum[right])) return true;
            }
        }
        return false;
    }
}

//hashset + cummulative sum
//最外层：中间那条线 再找第一条线 有相等和的加进set去 再找第三条线 有相等和并且在set里有 说明有三等分 返回true
