//O(N)异或
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int res = 0;
        for(int i:nums) res ^= i;
        return res;
    }
}

//follow up O(logn) 想了一下就写出来了
class Solution {
    public int singleNonDuplicate(int[] nums) {
        //mid == mid - 1: LEFT odd(include mid) right = mid; LEFT even(include mid) left = mid + 1
        //mid == mid + 1: RIGHT odd(include mid) left = mid; RIGHT even(include mid) right = mid - 1
        //mid != mid - 1 && mid != mid + 1 return mid
        int left = 0, right = nums.length - 1;
        while(left <= right) {
            int mid = left + (right - left)/2;
            if(mid - 1 >= 0 && nums[mid] == nums[mid - 1]) {
                int count = mid - left + 1;
                if(count % 2 != 0) right = mid;
                else left = mid + 1;
            } else if(mid + 1 < nums.length && nums[mid] == nums[mid + 1]) {
                int count = right - mid + 1;
                if(count % 2 != 0) left = mid;
                else right = mid - 1;
            } else return nums[mid];
        }
        return left;
    }
}

