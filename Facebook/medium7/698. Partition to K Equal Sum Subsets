  //dfs
  public boolean canPartitionKSubsets(int[] nums, int k) {
        int sum = 0;
        for(int num:nums)sum += num;
        if(k <= 0 || sum%k != 0)return false;
        int[] visited = new int[nums.length];
        return canPartition(nums, visited, 0, k, 0,sum/k);
    }
    
    public boolean canPartition(int[] nums, int[] visited, int start_index, int k, int cur_sum, int target){
        if(k==1)return true;
        if(cur_sum == target)return canPartition(nums, visited, 0, k-1, 0, target);
        for(int i = start_index; i<nums.length; i++){
            if(visited[i] == 0){
                visited[i] = 1;
                if(canPartition(nums, visited, i+1, k, cur_sum + nums[i], target))return true;
                visited[i] = 0;
            }
        }
        return false;
    }
    
    
    //assign group idea, recursive
    public boolean canPartitionKSubsets(int[] nums, int k) {
        int n = nums.length, sum = 0;
        for(int i = 0; i < n; i++) sum += nums[i];
        Arrays.sort(nums);
        if(sum % k != 0) return false;
        int eachSum = sum / k;
        return search(nums, n - 1, new int[k], eachSum);
    }
    public boolean search(int[] nums, int index, int[] group, int target) {
        if(index < 0) return true;
        int curr = nums[index--];
        for(int i = 0; i < group.length; i++) {//try to assign the curr to every groups
            if(curr + group[i] <= target) {
                group[i] += curr;//distrubute each num to a group
                if(search(nums, index, group, target)) return true;//if we find a right path that could assign all nums into a group, return true
                group[i] -= curr;
            }
            if(group[i] == 0) return false;
        }
        return false;
    }
